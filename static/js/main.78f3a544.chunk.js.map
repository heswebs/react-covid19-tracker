{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/images/covid-19.png","App.js","index.js"],"names":["Cards","data","confirmed","deaths","recovered","lastUpdate","className","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","urlWithCountry","axios","get","modifiedData","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","Countries","handleCountryChange","setCountries","onChange","e","target","i","App","state","setState","this","src","logo","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78f3a544.chunk.js","sourcesContent":["import React from 'react'\nimport './Cards.css'\nimport CountUp from 'react-countup'\n\n\nconst Cards = ({data:{confirmed, deaths, recovered, lastUpdate}}) => {\n\n    if (!confirmed){\n        return 'Loading...'\n    }\n\n    return (\n            <section className=\"cards\">\n                 <div className=\"cards__item cards__item--infected\">\n                    <span className=\"cards__text\">Infected</span>\n                    <h4>\n                        <CountUp \n                            start={0}\n                            end={confirmed.value}\n                            duration={2.5}\n                            separator=\",\"\n                            />  \n                    </h4>\n                    <span className=\"cards__text\">{new Date(lastUpdate).toDateString()}</span>   \n                    <p className=\"cards__text\">Number of active cases of COVID-19</p>\n                 </div>\n                 <div className=\"cards__item cards__item--recovered\">\n                    <span className=\"cards__text\">Recovered</span>\n                    <h4>\n                        <CountUp \n                            start={0} \n                            end={recovered.value}\n                            duration={2.5}\n                            separator=\",\"\n                            />      \n                    </h4>\n                    <span className=\"cards__text\">{new Date(lastUpdate).toDateString()}</span>   \n                    <p className=\"cards__text\">Number of recovered from COVID-19 </p>\n                 </div>\n                 <div className=\"cards__item cards__item--death\">\n                    <span className=\"cards__text\">Deaths</span>\n                     <h4>\n                        <CountUp \n                            start={0} \n                            end={deaths.value}\n                            duration={2.5}\n                            separator=\",\"\n                            />  \n                     </h4>   \n                     <span className=\"cards__text\">{new Date(lastUpdate).toDateString()}</span>   \n                    <p className=\"cards__text\">Number of deaths caused by COVID-19</p>\n                 </div>\n                \n            </section>       \n    )\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\n\nexport const fetchData = async (country) => {\n\n    let urlWithCountry = url;\n    urlWithCountry = country? `${url}/countries/${country}` : url\n\n    try {\n        const {data:{confirmed, recovered, deaths, lastUpdate}} = await axios.get(urlWithCountry);\n\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate\n        }\n\n        return modifiedData\n\n    } catch(error){\n\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\n  \n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\n    } catch (error) {\n      return error;\n    }\n  };\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useState, useEffect} from 'react'\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\nimport './Chart.css'\n\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(()=>{\n        const fetchAPI = async ()=> {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI()\n    },[])\n    const barChart = (\n        confirmed ? (\n          <Bar\n            data={{\n              labels: ['Infected', 'Recovered', 'Deaths'],\n              datasets: [\n                {\n                  label: 'People',\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                  data: [confirmed.value, recovered.value, deaths.value],\n                },\n              ],\n            }}\n            options={{\n              legend: { display: false },\n              title: { display: true, text: `Current state in ${country}` },\n            }}\n          />\n        ) : null\n      );\n    \n      const lineChart = (\n        dailyData[0] ? (\n          <Line\n            data={{\n              labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n              datasets: [{\n                data: dailyData.map((data) => data.confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n              }, {\n                data: dailyData.map((data) => data.deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n              },  {\n                data: dailyData.map((data) => data.recovered),\n                label: 'Recovered',\n                borderColor: 'green',\n                backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                fill: true,\n              },\n              ],\n            }}\n          />\n        ) : null\n      );\n    \n      return (\n        <section className=\"chart\">\n            <div className=\"chart__wrapper\">\n            {country ? barChart : lineChart}\n            </div>\n        </section>\n      );\n    };\n    \n    export default Chart;","import React, { useState, useEffect } from 'react';\n\nimport { fetchCountries } from '../../api';\n\nimport './CountryPicker.css';\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n      <section className=\"picker\">\n            <select className=\"picker__select\" onChange={(e) => handleCountryChange(e.target.value)}>\n            <option value=\"\">Global</option>\n            {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </select> \n        </section>\n          );\n};\n\nexport default Countries;","export default __webpack_public_path__ + \"static/media/covid-19.9e5d4fc7.png\";","import React from 'react'\n\nimport { Cards, Chart, CountryPicker } from './components'\nimport './App.css'\nimport { fetchData } from './api'\nimport logo from './components/images/covid-19.png'\n\nclass App extends React.Component {\n\n  state = {\n     data: {},\n     country:'',\n  }\n  \n  async componentDidMount() {\n    const data = await fetchData();\n\n    this.setState({ data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  }\n  \n  render() {\n\n    const { data, country } = this.state;\n\n   return ( \n    <div>\n        <header><img className=\"header__logo\" src={logo} alt=\"covid-19 logo\"/></header>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} /> \n    </div>)\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}